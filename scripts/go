#!/usr/bin/env python
from clang.cindex import CursorKind, TokenKind
from itertools import *
from sklearn.naive_bayes import *
from slang.analysis import *
from slang.data import *
from slang.functors import *
from slang.line import Line
from slang.tokenize import *
import collections
import numpy as np
import operator
import pdb
import sys

def interact(): pdb.set_trace()

def pp(seq):
  for x in seq: print x

positive = []
def getpos(item):
  positive.append(item)
  # print item.kind
  # pdb.set_trace()

negative = []
def getneg(item):
  negative.append(item)
  # pdb.set_trace()

getters = dict(on_true=getpos, on_false=getneg)

idx = SourceIndex('./boost/optional/', args=['-I.'])
cursors = tuple(idx.cursors([is_definition]))
print '# of functions:', len(cursors)
def p(out=None, given=true):
  positive[:] = []
  negative[:] = []
  prob = probability(cursors, function_has_newline_before_body, given, **getters)
  if out:
    print >>out, 'P=', prob
    print >>out, "POSITIVE:"
    for item in positive:
      print >>out, item
    print >>out, ''
    print >>out, "NEGATIVE:"
    for item in negative:
      print >>out, item
  return prob

def e(given=true):
  return gain(cursors, function_has_newline_before_body, given)

RULE = (
    (
        is_constructor
      | is_kind(_, CursorKind.CXX_METHOD)
      | is_kind(_, CursorKind.DESTRUCTOR)
      | is_kind(_, CursorKind.CONVERSION_FUNCTION)
      )
  & ~contains_keyword(function_body, 'if')
  & lt(function_body_stmts, 3)
  & lt(length_as_single_line, 115)
  )

print 'P =', probability(cursors, function_has_newline_before_body)
print 'P|R =', probability(cursors, function_has_newline_before_body, RULE)
print 'P|~R =', probability(cursors, function_has_newline_before_body, ~RULE)
print 'E(R) =', gain(cursors, function_has_newline_before_body, RULE)

FEATURES = [
    is_constructor
  , is_kind(_, CursorKind.CXX_METHOD)
  , is_kind(_, CursorKind.DESTRUCTOR)
  , is_kind(_, CursorKind.CONVERSION_FUNCTION)
  , contains_keyword(function_body, 'if')
  , function_body_stmts
  , length_as_single_line
  ]

# Naive Bayes.
data = np.array([[f(c) for f in FEATURES] for c in cursors])
target = np.array(map(function_has_newline_before_body, cursors))

for nb in [GaussianNB(), MultinomialNB(), BernoulliNB()]:
  y_pred = nb.fit(data, target).predict(data)
  print("%s: Number of mislabeled points out of a total %d points : %d"
      % (type(nb).__name__, data.shape[0],(target != y_pred).sum()))

print 'Misclassified examples:'
[(dumpSource(c), sys.stdout.write('\n'))
    for c,t,p in izip(cursors, target, y_pred) if t != p]
